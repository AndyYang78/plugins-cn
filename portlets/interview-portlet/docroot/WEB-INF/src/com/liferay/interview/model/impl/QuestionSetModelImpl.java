/**
 * Copyright (c) 2000-2012 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.interview.model.impl;

import com.liferay.interview.model.QuestionSet;
import com.liferay.interview.model.QuestionSetModel;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;

/**
 * The base model implementation for the QuestionSet service. Represents a row in the &quot;Interview_QuestionSet&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.liferay.interview.model.QuestionSetModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link QuestionSetImpl}.
 * </p>
 *
 * @author Sara Liu
 * @see QuestionSetImpl
 * @see com.liferay.interview.model.QuestionSet
 * @see com.liferay.interview.model.QuestionSetModel
 * @generated
 */
public class QuestionSetModelImpl extends BaseModelImpl<QuestionSet>
	implements QuestionSetModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a question set model instance should use the {@link com.liferay.interview.model.QuestionSet} interface instead.
	 */
	public static final String TABLE_NAME = "Interview_QuestionSet";
	public static final Object[][] TABLE_COLUMNS = {
			{ "questionSetId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "timeLimit", Types.INTEGER },
			{ "title", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table Interview_QuestionSet (questionSetId LONG not null primary key,userId LONG,createDate DATE null,modifiedDate DATE null,timeLimit INTEGER,title VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table Interview_QuestionSet";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.liferay.interview.model.QuestionSet"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.liferay.interview.model.QuestionSet"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.liferay.interview.model.QuestionSet"));

	public QuestionSetModelImpl() {
	}

	public long getPrimaryKey() {
		return _questionSetId;
	}

	public void setPrimaryKey(long primaryKey) {
		setQuestionSetId(primaryKey);
	}

	public Serializable getPrimaryKeyObj() {
		return new Long(_questionSetId);
	}

	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	public Class<?> getModelClass() {
		return QuestionSet.class;
	}

	public String getModelClassName() {
		return QuestionSet.class.getName();
	}

	public long getQuestionSetId() {
		return _questionSetId;
	}

	public void setQuestionSetId(long questionSetId) {
		_questionSetId = questionSetId;
	}

	public long getUserId() {
		return _userId;
	}

	public void setUserId(long userId) {
		_userId = userId;
	}

	public String getUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
	}

	public void setUserUuid(String userUuid) {
		_userUuid = userUuid;
	}

	public Date getCreateDate() {
		return _createDate;
	}

	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public void setModifiedDate(Date modifiedDate) {
		_modifiedDate = modifiedDate;
	}

	public int getTimeLimit() {
		return _timeLimit;
	}

	public void setTimeLimit(int timeLimit) {
		_timeLimit = timeLimit;
	}

	public String getTitle() {
		if (_title == null) {
			return StringPool.BLANK;
		}
		else {
			return _title;
		}
	}

	public void setTitle(String title) {
		_title = title;
	}

	@Override
	public QuestionSet toEscapedModel() {
		if (_escapedModelProxy == null) {
			_escapedModelProxy = (QuestionSet)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelProxyInterfaces,
					new AutoEscapeBeanHandler(this));
		}

		return _escapedModelProxy;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		if (_expandoBridge == null) {
			_expandoBridge = ExpandoBridgeFactoryUtil.getExpandoBridge(0,
					QuestionSet.class.getName(), getPrimaryKey());
		}

		return _expandoBridge;
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		getExpandoBridge().setAttributes(serviceContext);
	}

	@Override
	public Object clone() {
		QuestionSetImpl questionSetImpl = new QuestionSetImpl();

		questionSetImpl.setQuestionSetId(getQuestionSetId());
		questionSetImpl.setUserId(getUserId());
		questionSetImpl.setCreateDate(getCreateDate());
		questionSetImpl.setModifiedDate(getModifiedDate());
		questionSetImpl.setTimeLimit(getTimeLimit());
		questionSetImpl.setTitle(getTitle());

		questionSetImpl.resetOriginalValues();

		return questionSetImpl;
	}

	public int compareTo(QuestionSet questionSet) {
		long primaryKey = questionSet.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (obj == null) {
			return false;
		}

		QuestionSet questionSet = null;

		try {
			questionSet = (QuestionSet)obj;
		}
		catch (ClassCastException cce) {
			return false;
		}

		long primaryKey = questionSet.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<QuestionSet> toCacheModel() {
		QuestionSetCacheModel questionSetCacheModel = new QuestionSetCacheModel();

		questionSetCacheModel.questionSetId = getQuestionSetId();

		questionSetCacheModel.userId = getUserId();

		Date createDate = getCreateDate();

		if (createDate != null) {
			questionSetCacheModel.createDate = createDate.getTime();
		}
		else {
			questionSetCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			questionSetCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			questionSetCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		questionSetCacheModel.timeLimit = getTimeLimit();

		questionSetCacheModel.title = getTitle();

		String title = questionSetCacheModel.title;

		if ((title != null) && (title.length() == 0)) {
			questionSetCacheModel.title = null;
		}

		return questionSetCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(13);

		sb.append("{questionSetId=");
		sb.append(getQuestionSetId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", timeLimit=");
		sb.append(getTimeLimit());
		sb.append(", title=");
		sb.append(getTitle());
		sb.append("}");

		return sb.toString();
	}

	public String toXmlString() {
		StringBundler sb = new StringBundler(22);

		sb.append("<model><model-name>");
		sb.append("com.liferay.interview.model.QuestionSet");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>questionSetId</column-name><column-value><![CDATA[");
		sb.append(getQuestionSetId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>timeLimit</column-name><column-value><![CDATA[");
		sb.append(getTimeLimit());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>title</column-name><column-value><![CDATA[");
		sb.append(getTitle());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = QuestionSet.class.getClassLoader();
	private static Class<?>[] _escapedModelProxyInterfaces = new Class[] {
			QuestionSet.class
		};
	private long _questionSetId;
	private long _userId;
	private String _userUuid;
	private Date _createDate;
	private Date _modifiedDate;
	private int _timeLimit;
	private String _title;
	private transient ExpandoBridge _expandoBridge;
	private QuestionSet _escapedModelProxy;
}